//countdown
1. Array in details
2. String in details
3. Sorting algorithms
4. Conversion string, Array, Ingeger and taking out values at nth position
5. Number system changes: cobvert to decimal, binary
6. Binary arithmetic
7. Maps, sets
8. Object to array and vice vesa Conversion
9. Object swap properties.
//coding exercises
https://exercism.io/tracks/javascript/exercises
Will do: https://www.w3resource.com/javascript-exercises/fundamental/index.php

//Tips

Numbers: Convert string to number: multiply by 1 (*1). This is fastest. also +String does the work. 
    ParseInt(), parseFloat() or Number('123') or Math.floor()
    number.toString(radix) changes to a different base. The number must be base 10
    parseInt(input, the_input_base).toString(the_conversion_base): from any base to any base
    Math.floor(): smallest number less than or equal to. 12.5 = 12, 12.9=12, -12.9=-13
    Math.abs()
    Math.ceil(): largest number greater than or equal to. 12.5 = 13, 12.9 = 13, 12.01 = 13, -12.09 = -12 
    Math.round()
    Math.trunc()
    get quotient: Math.floor(a/b)
    get remainder: a % b

Map: get, set, has, keys(), values(), math.max(...map)
array: 
    arr.sort((a,b)=>a-b); 
    a.join(''); 
    a.reverse();
    a.shift(): returns first element; modifies the array
    a.unshift('xx'): Adds xx in begining; returns new length; modifies array
    a.includes('x')
    a.find(callback): returns 1st element which satifies callback; callback is element, index, array
    a.findIndex(callback)
    a.filter(callback): returns new array
    a.reduce(callback,initialvalue): callback: previous,current, index, array
    a.slice([begin[, end]]): begin to end, end not included; does not mutate
    a.splice(index,howmany, item1,item2...itemx). howmany removes and item1... itex adds. mutates the array
    a.keys()
    a.values()

array to objects: {...arr}, Object.assign({},arr)

Remove duplicates: set = new Set(arr); arr1 = Array.from(set.values()); 
string to array: s.split(''), Array.from(string), [...string];
array to string: array.join(''), array.join('').map(Number).reverse()

string.concat('a'); string s= 'abc'; s.includes('a')
array shift removes first element; array unshift adds element in begining

arr2 = [...arr1] or obj2 = [...obj1] does not do deep cloning. They do shallow cloning.
That means only top level items are clone but nested items are actually references.
So when you modify nested items in cloned element then original element changes.
Best deep cloning is
obj2 = JSON.parse(JSON.stringify(obj1));

//Practice the following
1. Strings
	reverse a string const str1 = 'abcdefg'; str2 = [...str1].reverse().join('');
    Convert Array to String without comma: arr.join()
    To array, split('')
    Take out / remove n chars
    Regex search
    Search and replace
    Tolowercase or touppercase
    Capitallize first letter of a word
    Remember: charAt(x), concat(a1,a2), indexOf(substr, [start]), 
    lastIndexOf(substr, [start]), match(regexp), replace(regexp/substr, replacetext)
    , search(regexp), slice(start, [end]), substr(start, [length]), substring(from, [to])
    toLowerCase(), toUpperCase(), replace()
    special chars: 
        \t – tab
        \b – backspace/delete
        \r – carriage return
        \n – newline
        \f – form feed
    good site: https://www.digitalocean.com/community/tutorials/how-to-index-split-and-manipulate-strings-in-javascript
2. Array manipulations
    create unique array: using new Set(), Array.from(set.values())
    get max: Math.max(...array)
    array to object
    object to array
    iterations in array
    remember that from foreach you cannot come out. From regular loops you can break or return
    slice : No mutate. Does not include the last number. arr.slice([begin[, end]]). begin can be negative but end needs to be positive integer. 
    splice : Mutates. array.splice(start[, deleteCount[, item1[, item2[, ...]]]]). for only addition the deletecount should be zero. Returns the removed items. Inserts items at start.
    push, pop, sort
    concat, find, filter, fill, includes, map, reduce
    Object.keys, Object.values, Object.entries
    Array spread, Object spread
    array.join()
    remove duplicates:
    const arr = [1, 2, 2, 4, 5, 5];
    [...new Set(arr)]
3. https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-a-given-value/
4. https://www.codewars.com/
    
    
